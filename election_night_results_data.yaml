---
openapi: 3.0.2
info:
  title: election night results - data
  version: 1.0.0
  description: the uploading of the election night results data
paths:
  /upload/map:
    post:
      requestBody:
        content:
          multipart/form-data:
            schema:
              format: binary
              type: string
            examples:
              map:
                value: '"<FILE>"'
        required: true
      tags:
      - fileUploading
      responses:
        "204":
          description: When map has been put on cdn
        "401":
          description: Uploader is not authenticated or authorized
      operationId: uploadCountyMap
      summary: Uploads the county precinct map for the public app consumption
      description: one of the three calls required to set up a new election
  /upload/results:
    post:
      requestBody:
        content:
          multipart/form-data:
            schema:
              format: binary
              type: string
            examples:
              results:
                value: '"<FILE>"'
        required: true
      servers:
      - url: https://api.dev.electionnightresults.com
        description: ""
      tags:
      - fileUploading
      responses:
        "201":
          description: Results were uploaded successfully
        "401":
          description: The user is not authenticated or authorized
        "415":
          description: The user uploaded the wrong media type, meaning we didnt get
            the expected file format
      operationId: uploadResults
      summary: upload the current results data
      description: How the user uploads the election results. As the user updates
        the results, this file will have 100% of the info required for this, meaning
        old uploads get archived, so there is no corresponding PUT request
  /upload/registration:
    post:
      requestBody:
        content:
          multipart/form-data:
            schema:
              format: binary
              type: string
            examples:
              data:
                value: '"<FILE>"'
      servers:
      - url: https://api.dev.electionnightresults.com
        description: ""
      tags:
      - fileUploading
      responses:
        "201":
          description: The file was able to be parsed and transformed into a json
            representation
        "401":
          description: The uploader failed authentication or authorization
        "415":
          description: Uploader sent a file that does not meet requirments to be parsed
            - example expected format was ES&S but got a random text file
      operationId: uploadVoterRegistration
      summary: upload the voter registration file
      description: 'one of the three calls required to set up a new election. '
  /happyfunballs:
    summary: Path used to manage the list of happyfunballs.
    description: The REST endpoint/path used to list and create zero or more `HappyFunBall`
      entities.  This path contains a `GET` and `POST` operation to perform the list
      and create tasks, respectively.
    get:
      tags:
      - happyfunballs
      responses:
        "200":
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/HappyFunBall'
              examples:
                funBalls:
                  value:
                  - ball: true
                    happy: true
                    sad: true
                  - ball: true
                    happy: true
                    sad: true
          description: Successful response - returns an array of `HappyFunBall` entities.
      operationId: gethappyfunballs
      summary: List All happyfunballs
      description: Gets a list of all `HappyFunBall` entities.
    post:
      requestBody:
        description: A new `HappyFunBall` to be created.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HappyFunBall'
        required: true
      tags:
      - happyfunballs
      responses:
        "201":
          description: Successful response.
      operationId: createHappyFunBall
      summary: Create a HappyFunBall
      description: Creates a new instance of a `HappyFunBall`.
  /happyfunballs/{happyfunballId}:
    summary: Path used to manage a single HappyFunBall.
    description: The REST endpoint/path used to get, update, and delete single instances
      of an `HappyFunBall`.  This path contains `GET`, `PUT`, and `DELETE` operations
      used to perform the get, update, and delete tasks, respectively.
    get:
      tags:
      - happyfunballs
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HappyFunBall'
          description: Successful response - returns a single `HappyFunBall`.
      operationId: getHappyFunBall
      summary: Get a HappyFunBall
      description: Gets the details of a single instance of a `HappyFunBall`.
    put:
      requestBody:
        description: Updated `HappyFunBall` information.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HappyFunBall'
        required: true
      tags:
      - happyfunballs
      responses:
        "202":
          description: Successful response.
      operationId: updateHappyFunBall
      summary: Update a HappyFunBall
      description: Updates an existing `HappyFunBall`.
    delete:
      tags:
      - happyfunballs
      responses:
        "204":
          description: Successful response.
      operationId: deleteHappyFunBall
      summary: Delete a HappyFunBall
      description: Deletes an existing `HappyFunBall`.
    parameters:
    - name: happyfunballId
      description: A unique identifier for a `HappyFunBall`.
      schema:
        type: string
      in: path
      required: true
components:
  schemas:
    HappyFunBall:
      title: Root Type for HappyFunBall
      description: A ball.  Very Happy.  Very fun.
      type: object
      properties:
        ball:
          type: boolean
        happy:
          type: boolean
        sad:
          type: boolean
      example:
        ball: true
        happy: true
        sad: false
